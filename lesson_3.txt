When would you want to use a remote repository rather than keeping all your work local?

I would want to use a remote repository whenever I had to share a project with other
people that were not located near me. For example, if the other contributers were
located in a different town, or even country then they would not have access to the
files on my local site. Even if I used a repository that was located on a company's
premises, it would still limit the ability of the people to work and commit code if
they were not on site - unless they went through all of the access controls to
establish a remote session, etc.


Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

I think that you might want to always pull changes manually as opposed to having them
stay in sync automatically because your local copy would always have the updates that
you were currently working on and if you have not committed them yet, and the repos
were set to keep in sync automatically, then there would be the chance to have your
updates or changes overwritten. This would be horrible and could make you loose your
work that you were working on and then you would have to manually remember what you 
were updating and then have to update it again. Also, I think that it follows common
reasoning and a logical flow that the remote repo is the final storage location, or 
can even be thought of as a stable branch - even though you can have multiple branches
for this concept.


Describe the differences between forks, clones, and branches. When would you use one
instead of another?

A fork is a type of clone that only occurs on GitHub (GH). GH uses this term to show
and describe the relationship of cloning someone else's repository. GH also records
this information to maintain a history of where the forked repository originated from.
Cloning is when git makes a copy of an entire repository which would include all of
the branches. You would fork someone's repository on GH whenever you want to make your
own changes without affecting the other repository. You would clone repositories
whenever you are wanting to make a local copy of your GH repository. Brancing is when
you are making changes that you do not want to affect the master branch of code. These
changes can still be merged back in if desired. Branches are a deviation from a certain
state of another branch, most likely originating from the master branch.


What is the benefit of having a copy of the last known state of the remote stored locally?

One benefit of having a copy of the last known state of the remote stored locally is
that when you make changes offline and then mess up, you can revert a change back to the
original state stored of a remote repository. Another benefit would be if in the process
of making your changes you accidently delete some of the original code. Upon testing the
new code, once you realize the bug, you would then have the original remote state stored
locally to compare and easily find your bug in order to fix it.
